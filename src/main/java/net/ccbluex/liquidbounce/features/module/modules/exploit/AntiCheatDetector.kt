/*
 *
 *  * FDPClient Hacked Client
 *  * A shit open source mixin-based injection hacked client for Minecraft using Minecraft Forge based on LiquidBounce.
 *  * DeleteFDP.today
 *
 */

/*
 * FDPClient Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge by LiquidBounce.
 * https://github.com/UnlegitMC/FDPClient/
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import joptsimple.internal.Strings
import net.ccbluex.liquidbounce.event.EventTarget
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.value.ListValue
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo
import net.ccbluex.liquidbounce.utils.ClientUtils
import net.ccbluex.liquidbounce.utils.timer.TickTimer
import net.minecraft.network.play.client.C14PacketTabComplete
import net.minecraft.network.play.server.S3APacketTabComplete

@ModuleInfo(name = "AntiCheatDetector", category = ModuleCategory.EXPLOIT)
class AntiCheatDetector : Module() {
    private val antiCheats = arrayOf(
        "aAc",
        "NcP",
        "MaTriX",
        "alErt",
        "VeRus",
        "bEttErAntIchEat",
        "bAc",
        "HaWk",
        "SpaRtAn",
        "rEflEx",
        "IntAve",
        "buKKit",
        "verbose",
        "vulcan"
    )
    private var index = 0
    private val tickTimer = TickTimer()

    override fun onEnable() {
        if (mc.thePlayer == null) return
        index = 0
        checkCommand(antiCheats[index])
        tickTimer.reset()
    }

    private fun checkCommand(command: String) {
        mc.netHandler.addToSendQueue(C14PacketTabComplete("/" + /*antiCheats[index]*/command + " "))
    }

    @EventTarget
    fun onUpdate(event: UpdateEvent) {
        tickTimer.update()
        if (tickTimer.hasTimePassed(33)) {
            ClientUtils.displayChatMessage("§cFailed to detect " + antiCheats[index] + ": Timed out...")
            tickTimer.reset()
            index++
            if (index > 11) {
                state = false
                return
            }
            checkCommand(antiCheats[index])

        }
    }

    @EventTarget
    fun onPacket(event: PacketEvent) {
        if (event.packet is S3APacketTabComplete) {
            val plugins: MutableList<String> = ArrayList()
            val commands = event.packet.func_149630_c()

            for (command1 in commands) {
                val pluginName = command1
                if (!plugins.contains(pluginName)) plugins.add(pluginName)
            }

            plugins.sort()

            if (!plugins.isEmpty()) {
                ClientUtils.displayChatMessage(
                    "§aDetected " + antiCheats[index] + " AntiCheat §7»  §7(§8" + plugins.size + "§7): §c" + Strings.join(
                        plugins.toTypedArray(),
                        "§7, §c"
                    )
                )
            } else {
                ClientUtils.displayChatMessage("§cFailed to detect " + antiCheats[index] + ": Empty reply")
            }
            index++
            if (index > 11) {
                state = false
                return
            }
            checkCommand(antiCheats[index])

            tickTimer.reset()
        }
    }
}